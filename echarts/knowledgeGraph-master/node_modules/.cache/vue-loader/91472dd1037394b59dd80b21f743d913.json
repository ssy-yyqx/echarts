{"remainingRequest":"E:\\wz\\knowledgeGraph-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\wz\\knowledgeGraph-master\\src\\components\\Charts.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\wz\\knowledgeGraph-master\\src\\components\\Charts.vue","mtime":1631178322797},{"path":"E:\\wz\\knowledgeGraph-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1631155481252},{"path":"E:\\wz\\knowledgeGraph-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1629941514589},{"path":"E:\\wz\\knowledgeGraph-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1631155481252},{"path":"E:\\wz\\knowledgeGraph-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1629941555268}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport{dataList} from './mock'\n// 引入 ECharts 主模块\nvar echarts = require('echarts/lib/echarts');\n// 引入柱状图\nrequire('echarts/lib/chart/graph');\n// 引入提示框和标题组件\nrequire('echarts/lib/component/tooltip');\nrequire('echarts/lib/component/title');\nexport default {\n    name:'Charts',\n    data(){\n        return {\n            myChart:'',\n            nodes:[],\n            links:[],\n        };\n    },\n    computed:{\n        \n    },\n    methods:{\n        /**\n         * 设置echarts配置项,重绘画布\n         */\n        initCharts(){\n            if(!this.myChart){\n                this.myChart = echarts.init(document.getElementById('chart'));\n            }\n            // 指定图表的配置项和数据\n            let option = {\n                // 动画更新变化时间\n                animationDurationUpdate: 1500,                       \n                animationEasingUpdate: 'quinticInOut',  \n                tooltip:{\n                    show:false\n                },\n                series: [\n                    {\n                        name: '关系图',\n                        type:'graph',\n                        layout:'force',\n                        legendHoverLink: true, //是否启用图例 hover(悬停) 时的联动高亮。\n                        hoverAnimation: true, //是否开启鼠标悬停节点的显示动画\n                        edgeLabel: {   \n                            position:'middle',       //边上的文字样式\n                            normal: {\n                                formatter:\"{c}\",\n                                show:true,\n                                \n                            }\n                        },\n                        edgeSymbol: ['arrow', ''],\n                        force:{\n                            edgeLength: 180,\n                            repulsion:5000\n                        },\n                        roam:true,\n                        draggable : true,//每个节点的拖拉\n                        itemStyle:{\n                            normal: {\n                                color:'#00FAE1',\n                                cursor:'pointer',\n                                //color:Math.floor(Math.random()*16777215).toString(16),\n                                // color: ['#fc853e','#28cad8','#9564bf','#bd407e','#28cad8','#fc853e','#e5a214'],\n                                label: { \n                                        //formatter: \"{c}\",为什么这个写上就不打开了？\n                                        show: true ,\n                                        textStyle : { //标签的字体样式\n                                            color : '#fff', //字体颜色\n                                            fontStyle : 'normal',//文字字体的风格 'normal'标准 'italic'斜体 'oblique' 倾斜\n                                            fontWeight : 'bolder',//'normal'标准'bold'粗的'bolder'更粗的'lighter'更细的或100 | 200 | 300 | 400...\n                                            fontFamily : 'sans-serif', //文字的字体系列\n                                            fontSize : 12, //字体大小\n                                        }\n                                },\n                                nodeStyle: {\n                                    brushType: \"both\",\n                                    borderColor: \"rgba(255,215,0,0.4)\",\n                                    borderWidth: 1,\n                                },\n                            },\n                            //鼠标放上去有阴影效果\n                            emphasis: {\n                                shadowColor: '#00FAE1',\n                                shadowOffsetX: 0,\n                                shadowOffsetY: 0,\n                                shadowBlur: 40,\n                            },\n                        },\n                        lineStyle:{\n                            width:2,\n                        },\n                        label:{\n                            color:'#00FAE1',\n                            fontSize:18,\n                        },\n                        symbolSize:60,//节点大小\n                        links: this.links,\n                        data:this.nodes,\n                        cursor: 'pointer',\n                    }\n                ]\n            };\n            // 使用刚指定的配置项和数据显示图表。\n            this.myChart.setOption(option);\n        },\n        /**\n         * 格式化数据到表格需要的数据\n         */\n        formatData(){\n            \n            let nodes = []\n            const data = []\n            const links = []\n            let target = ''\n                this.nodes = []\n                this.links = []\n                console.log(dataList);\n                \n                nodes = [].concat(dataList[0])\n                // target = dataList[0].id +''\n                // const dataInfo = {\n                //     \"id\": target,\n                //     \"name\": dataList[0].name,\n                //     category:dataList[0].categary,\n                //     isClicked:true,\n                //     isRoot:true,\n                //     symbolSize:30,\n                // }\n                // data.push(dataInfo)\n            nodes.forEach((items,indexs)=>{\n                items.nodes.forEach((item,index) => {\n                    // 注意 id必须是string  否则连线连不上\n                    const id = item.id + ''\n                    const dataInfo = {\n                        \"id\": id,\n                        parentId:target,\n                        category:item.categary,\n                        \"name\": item.label,\n                        isClicked:false,\n                    }\n                    data.push(dataInfo)\n                    \n                })\n                items.edges.forEach((i,d)=>{\n                    // if(target!=i.id){\n                        links.push({\n                            value:i.label,\n                            target:i.from,\n                            source:i.to,\n                        })\n                    // }\n                })\n                \n                \n            })\n            this.nodes.push(...data)\n            this.links.push(...links)\n            this.initCharts()\n        },\n    },\n    created(){\n        \n    },\n    mounted(){\n        this.formatData()\n    },\n    beforeDestroy(){\n        \n    }\n}\n",{"version":3,"sources":["Charts.vue"],"names":[],"mappings":";;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA","file":"Charts.vue","sourceRoot":"src/components","sourcesContent":["<template>\n<div class=\"container\">\n        <div class=\"center\">\n            <div class=\"canvas\">\n                <div id=\"chart\" class=\"chart\"></div>\n            </div>\n        </div>\n\t</div>\n    \n</template>\n<script>\n    import{dataList} from './mock'\n    // 引入 ECharts 主模块\n    var echarts = require('echarts/lib/echarts');\n    // 引入柱状图\n    require('echarts/lib/chart/graph');\n    // 引入提示框和标题组件\n    require('echarts/lib/component/tooltip');\n    require('echarts/lib/component/title');\n    export default {\n        name:'Charts',\n        data(){\n            return {\n                myChart:'',\n                nodes:[],\n                links:[],\n            };\n        },\n        computed:{\n            \n        },\n        methods:{\n            /**\n             * 设置echarts配置项,重绘画布\n             */\n            initCharts(){\n                if(!this.myChart){\n                    this.myChart = echarts.init(document.getElementById('chart'));\n                }\n                // 指定图表的配置项和数据\n                let option = {\n                    // 动画更新变化时间\n                    animationDurationUpdate: 1500,                       \n                    animationEasingUpdate: 'quinticInOut',  \n                    tooltip:{\n                        show:false\n                    },\n                    series: [\n                        {\n                            name: '关系图',\n                            type:'graph',\n                            layout:'force',\n                            legendHoverLink: true, //是否启用图例 hover(悬停) 时的联动高亮。\n                            hoverAnimation: true, //是否开启鼠标悬停节点的显示动画\n                            edgeLabel: {   \n                                position:'middle',       //边上的文字样式\n                                normal: {\n                                    formatter:\"{c}\",\n                                    show:true,\n                                    \n                                }\n                            },\n                            edgeSymbol: ['arrow', ''],\n                            force:{\n                                edgeLength: 180,\n                                repulsion:5000\n                            },\n                            roam:true,\n                            draggable : true,//每个节点的拖拉\n                            itemStyle:{\n                                normal: {\n                                    color:'#00FAE1',\n                                    cursor:'pointer',\n                                    //color:Math.floor(Math.random()*16777215).toString(16),\n                                    // color: ['#fc853e','#28cad8','#9564bf','#bd407e','#28cad8','#fc853e','#e5a214'],\n                                    label: { \n                                            //formatter: \"{c}\",为什么这个写上就不打开了？\n                                            show: true ,\n                                            textStyle : { //标签的字体样式\n                                                color : '#fff', //字体颜色\n                                                fontStyle : 'normal',//文字字体的风格 'normal'标准 'italic'斜体 'oblique' 倾斜\n                                                fontWeight : 'bolder',//'normal'标准'bold'粗的'bolder'更粗的'lighter'更细的或100 | 200 | 300 | 400...\n                                                fontFamily : 'sans-serif', //文字的字体系列\n                                                fontSize : 12, //字体大小\n                                            }\n                                    },\n                                    nodeStyle: {\n                                        brushType: \"both\",\n                                        borderColor: \"rgba(255,215,0,0.4)\",\n                                        borderWidth: 1,\n                                    },\n                                },\n                                //鼠标放上去有阴影效果\n                                emphasis: {\n                                    shadowColor: '#00FAE1',\n                                    shadowOffsetX: 0,\n                                    shadowOffsetY: 0,\n                                    shadowBlur: 40,\n                                },\n                            },\n                            lineStyle:{\n                                width:2,\n                            },\n                            label:{\n                                color:'#00FAE1',\n                                fontSize:18,\n                            },\n                            symbolSize:60,//节点大小\n                            links: this.links,\n                            data:this.nodes,\n                            cursor: 'pointer',\n                        }\n                    ]\n                };\n                // 使用刚指定的配置项和数据显示图表。\n                this.myChart.setOption(option);\n            },\n            /**\n             * 格式化数据到表格需要的数据\n             */\n            formatData(){\n                \n                let nodes = []\n                const data = []\n                const links = []\n                let target = ''\n                    this.nodes = []\n                    this.links = []\n                    console.log(dataList);\n                    \n                    nodes = [].concat(dataList[0])\n                    // target = dataList[0].id +''\n                    // const dataInfo = {\n                    //     \"id\": target,\n                    //     \"name\": dataList[0].name,\n                    //     category:dataList[0].categary,\n                    //     isClicked:true,\n                    //     isRoot:true,\n                    //     symbolSize:30,\n                    // }\n                    // data.push(dataInfo)\n                nodes.forEach((items,indexs)=>{\n                    items.nodes.forEach((item,index) => {\n                        // 注意 id必须是string  否则连线连不上\n                        const id = item.id + ''\n                        const dataInfo = {\n                            \"id\": id,\n                            parentId:target,\n                            category:item.categary,\n                            \"name\": item.label,\n                            isClicked:false,\n                        }\n                        data.push(dataInfo)\n                        \n                    })\n                    items.edges.forEach((i,d)=>{\n                        // if(target!=i.id){\n                            links.push({\n                                value:i.label,\n                                target:i.from,\n                                source:i.to,\n                            })\n                        // }\n                    })\n                    \n                    \n                })\n                this.nodes.push(...data)\n                this.links.push(...links)\n                this.initCharts()\n            },\n        },\n        created(){\n            \n        },\n        mounted(){\n            this.formatData()\n        },\n        beforeDestroy(){\n            \n        }\n    }\n</script>\n<style scoped>\n    .chart{\n        height:100%;\n    }\n    .container {\n\toverflow: hidden;\n\tposition: relative;\n    min-height: 100vh;\n}\n.canvas {\n    margin-top: 10px;\n\theight: calc(100vh - 110px);\n}\n.center {\n\tposition: relative;\n\tmin-width: 1200px;\n\tmargin: 0 auto;\n    width: 85%;\n}\n.header {\n\tpadding-top: 30px;\n}\n.ipt {\n\tborder: 1px solid #9093c7;\n\tborder-radius: 20px;\n\twidth: 374px;\n\theight: 44px;\n\tline-height: 44px;\n\tbox-sizing: border-box;\n    color: #555;\n    background-color: #fff;\n    background-image: none;\n    border: 1px solid #ccc;\n}\n\n.tips {\n\tfont-size: 14px;\n\tcolor: #ccc;\n\tline-height: 17px;\n\tmargin-top: 5px;\n}\n</style>"]}]}