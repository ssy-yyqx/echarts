{"remainingRequest":"E:\\wz\\knowledgeGraph-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\wz\\knowledgeGraph-master\\src\\components\\Keywords.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\wz\\knowledgeGraph-master\\src\\components\\Keywords.vue","mtime":1631165996131},{"path":"E:\\wz\\knowledgeGraph-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1631155481252},{"path":"E:\\wz\\knowledgeGraph-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1629941514589},{"path":"E:\\wz\\knowledgeGraph-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1631155481252},{"path":"E:\\wz\\knowledgeGraph-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1629941555268}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {\n    categarys\n} from './mock'\nexport default {\n    name:'Keywords',\n    components:{\n        \n    },\n    mixins:[\n        \n    ],\n    props:{\n        \n    },\n    data(){\n        return {\n            tags:[],\n            RADIUS:200,\n            ZRADIUS:200,\n            CX:600,\n            CY:300,\n            speedX: Math.PI / 360,\n            speedY: Math.PI / 360,\n        };\n    },\n    computed:{\n\n    },\n    methods:{\n        /**\n         * 标签点击\n         */\n        async nodeClick(tag){\n            this.$emit('searchData',tag.text)\n        },\n        /**\n         * 初始化标签数据\n         */\n        initTags(){\n            const tagNames = [...categarys]\n            //初始化标签位置\n            let tags = [];\n            const length = tagNames.length\n            for (let i = 0; i < length; i++) {\n                let tag = {};\n                let k = -1 + (2 * (i + 1) - 1) / length;\n                let a = Math.acos(k);\n                let b = a * Math.sqrt(length * Math.PI);\n                tag.text = tagNames[i];\n                tag.x = this.CX + this.RADIUS * Math.sin(a) * Math.cos(b);\n                tag.y = this.CY + this.RADIUS * Math.sin(a) * Math.sin(b);\n                tag.z = this.ZRADIUS * Math.cos(a);\n                tag.color =\n                    \"rgb(\" +\n                    parseInt(Math.random() * 255) +\n                    \",\" +\n                    parseInt(Math.random() * 255) +\n                    \",\" +\n                    parseInt(Math.random() * 255) +\n                    \")\";\n                tags.push(tag);\n            }\n            this.tags = [].concat(tags);\n        },\n        /**\n         * 自动滚动效果,计算滚动位置\n         */\n        rotateX(speedX) {\n            var cos = Math.cos(speedX);\n            var sin = Math.sin(speedX);\n            for (let tag of this.tags) {\n                var y1 = (tag.y - this.CY) * cos - tag.z * sin + this.CY;\n                var z1 = tag.z * cos + (tag.y - this.CY) * sin;\n                tag.y = y1;\n                tag.z = z1;\n            }\n        },\n        /**\n         * 自动滚动效果,计算滚动位置\n         */\n        rotateY(speedY) {\n            var cos = Math.cos(speedY);\n            var sin = Math.sin(speedY);\n            for (let tag of this.tags) {\n                var x1 = (tag.x - this.CX) * cos - tag.z * sin + this.CX;\n                var z1 = tag.z * cos + (tag.x - this.CX) * sin;\n                tag.x = x1;\n                tag.z = z1;\n            }\n        },\n        /**\n         * 响应鼠标移动\n         */\n        listener(event) {\n            //\n            var x = event.clientX - this.CX;\n            var y = event.clientY - this.CY;\n            this.speedX =\n                x * 0.0001 > 0\n                ? Math.min(this.RADIUS * 0.00002, x * 0.0001)\n                : Math.max(-this.RADIUS * 0.00002, x * 0.0001);\n            this.speedY =\n                y * 0.0001 > 0\n                ? Math.min(this.RADIUS * 0.00002, y * 0.0001)\n                : Math.max(-this.RADIUS * 0.00002, y * 0.0001);\n        },\n        /**\n         * 监听窗体大小变化\n         */\n        resizeWindow(){\n            let height = document.body.clientHeight\n            let width = document.body.clientWidth\n            width = width*0.85;\n            if(width>1200){\n                this.CX = width/2\n            }\n            height = height - 150\n            this.CY = height / 2;\n            let radius = Math.min(this.CY,this.CX)/2\n            if(radius>200){\n                 this.RADIUS = radius\n            }\n           this.initTags()\n            this.$emit('windowResize')\n        }\n    },\n    created(){\n        \n    },\n    mounted(){\n        this.resizeWindow()\n        window.addEventListener('resize',this.resizeWindow)\n        this.initTags()\n        //使球开始旋转\n        const interval = setInterval(() => {\n            this.rotateX(this.speedX);\n            this.rotateY(this.speedY);\n        }, 17);\n        this.$once('hook:beforedestroy',()=>{\n            interval&&clearInterval(interval)\n            window.removeEventListener('resize',this.resizeWindow)\n        })\n    },\n    beforeDestroy(){\n        \n    }\n}\n",{"version":3,"sources":["Keywords.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAkfile":"Keywords.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div class=\"container\">\n        <svg class=\"keywords\" @mousemove=\"listener($event)\">\n            <a href=\"javascript:void(0)\" v-for=\"(tag,index) in tags\" :key=\"index\" @click=\"nodeClick(tag)\">\n                <text\n                    class=\"text\"\n                    :x=\"tag.x\"\n                    :y=\"tag.y\"\n                    :font-size=\"20 * (600/(600-tag.z))\"\n                    :fill-opacity=\"((400+tag.z)/600)\"\n                    :fill=\"tag.color\"\n                    >{{tag.text}}\n                </text>\n            </a>\n        </svg>\n    </div>\n</template>\n<script>\n    import {\n        categarys\n    } from './mock'\n    export default {\n        name:'Keywords',\n        components:{\n            \n        },\n        mixins:[\n            \n        ],\n        props:{\n            \n        },\n        data(){\n            return {\n                tags:[],\n                RADIUS:200,\n                ZRADIUS:200,\n                CX:600,\n                CY:300,\n                speedX: Math.PI / 360,\n                speedY: Math.PI / 360,\n            };\n        },\n        computed:{\n\n        },\n        methods:{\n            /**\n             * 标签点击\n             */\n            async nodeClick(tag){\n                this.$emit('searchData',tag.text)\n            },\n            /**\n             * 初始化标签数据\n             */\n            initTags(){\n                const tagNames = [...categarys]\n                //初始化标签位置\n                let tags = [];\n                const length = tagNames.length\n                for (let i = 0; i < length; i++) {\n                    let tag = {};\n                    let k = -1 + (2 * (i + 1) - 1) / length;\n                    let a = Math.acos(k);\n                    let b = a * Math.sqrt(length * Math.PI);\n                    tag.text = tagNames[i];\n                    tag.x = this.CX + this.RADIUS * Math.sin(a) * Math.cos(b);\n                    tag.y = this.CY + this.RADIUS * Math.sin(a) * Math.sin(b);\n                    tag.z = this.ZRADIUS * Math.cos(a);\n                    tag.color =\n                        \"rgb(\" +\n                        parseInt(Math.random() * 255) +\n                        \",\" +\n                        parseInt(Math.random() * 255) +\n                        \",\" +\n                        parseInt(Math.random() * 255) +\n                        \")\";\n                    tags.push(tag);\n                }\n                this.tags = [].concat(tags);\n            },\n            /**\n             * 自动滚动效果,计算滚动位置\n             */\n            rotateX(speedX) {\n                var cos = Math.cos(speedX);\n                var sin = Math.sin(speedX);\n                for (let tag of this.tags) {\n                    var y1 = (tag.y - this.CY) * cos - tag.z * sin + this.CY;\n                    var z1 = tag.z * cos + (tag.y - this.CY) * sin;\n                    tag.y = y1;\n                    tag.z = z1;\n                }\n            },\n            /**\n             * 自动滚动效果,计算滚动位置\n             */\n            rotateY(speedY) {\n                var cos = Math.cos(speedY);\n                var sin = Math.sin(speedY);\n                for (let tag of this.tags) {\n                    var x1 = (tag.x - this.CX) * cos - tag.z * sin + this.CX;\n                    var z1 = tag.z * cos + (tag.x - this.CX) * sin;\n                    tag.x = x1;\n                    tag.z = z1;\n                }\n            },\n            /**\n             * 响应鼠标移动\n             */\n            listener(event) {\n                //\n                var x = event.clientX - this.CX;\n                var y = event.clientY - this.CY;\n                this.speedX =\n                    x * 0.0001 > 0\n                    ? Math.min(this.RADIUS * 0.00002, x * 0.0001)\n                    : Math.max(-this.RADIUS * 0.00002, x * 0.0001);\n                this.speedY =\n                    y * 0.0001 > 0\n                    ? Math.min(this.RADIUS * 0.00002, y * 0.0001)\n                    : Math.max(-this.RADIUS * 0.00002, y * 0.0001);\n            },\n            /**\n             * 监听窗体大小变化\n             */\n            resizeWindow(){\n                let height = document.body.clientHeight\n                let width = document.body.clientWidth\n                width = width*0.85;\n                if(width>1200){\n                    this.CX = width/2\n                }\n                height = height - 150\n                this.CY = height / 2;\n                let radius = Math.min(this.CY,this.CX)/2\n                if(radius>200){\n                     this.RADIUS = radius\n                }\n               this.initTags()\n                this.$emit('windowResize')\n            }\n        },\n        created(){\n            \n        },\n        mounted(){\n            this.resizeWindow()\n            window.addEventListener('resize',this.resizeWindow)\n            this.initTags()\n            //使球开始旋转\n            const interval = setInterval(() => {\n                this.rotateX(this.speedX);\n                this.rotateY(this.speedY);\n            }, 17);\n            this.$once('hook:beforedestroy',()=>{\n                interval&&clearInterval(interval)\n                window.removeEventListener('resize',this.resizeWindow)\n            })\n        },\n        beforeDestroy(){\n            \n        }\n    }\n</script>\n<style scoped>\n    .container,.keywords{\n        width: 100%;\n        height:100%;\n    }\n    .keywords .text:hover{\n        font-size: 200%;\n    }\n</style>"]}]}