{"remainingRequest":"E:\\网上项目\\echarts关系图\\echarts\\knowledgeGraph-master\\node_modules\\babel-loader\\lib\\index.js!E:\\网上项目\\echarts关系图\\echarts\\knowledgeGraph-master\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\网上项目\\echarts关系图\\echarts\\knowledgeGraph-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\网上项目\\echarts关系图\\echarts\\knowledgeGraph-master\\src\\components\\Charts.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\网上项目\\echarts关系图\\echarts\\knowledgeGraph-master\\src\\components\\Charts.vue","mtime":1631509851000},{"path":"E:\\网上项目\\echarts关系图\\echarts\\knowledgeGraph-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1631155481000},{"path":"E:\\网上项目\\echarts关系图\\echarts\\knowledgeGraph-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1629941514000},{"path":"E:\\网上项目\\echarts关系图\\echarts\\knowledgeGraph-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1631155481000},{"path":"E:\\网上项目\\echarts关系图\\echarts\\knowledgeGraph-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1629941555000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { dataList } from \"./mock\"; // 引入 ECharts 主模块\n\nvar echarts = require('echarts/lib/echarts'); // 引入柱状图\n\n\nrequire('echarts/lib/chart/graph'); // 引入提示框和标题组件\n\n\nrequire('echarts/lib/component/tooltip');\n\nrequire('echarts/lib/component/title');\n\nexport default {\n  name: 'Charts',\n  data: function data() {\n    return {\n      myChart: '',\n      nodes: [],\n      links: []\n    };\n  },\n  computed: {},\n  methods: {\n    /**\n     * 设置echarts配置项,重绘画布\n     */\n    initCharts: function initCharts() {\n      if (!this.myChart) {\n        this.myChart = echarts.init(document.getElementById('chart'));\n      } // 指定图表的配置项和数据\n\n\n      var option = {\n        // 动画更新变化时间\n        animationDurationUpdate: 1500,\n        animationEasingUpdate: 'quinticInOut',\n        tooltip: {\n          show: false\n        },\n        series: [{\n          name: '关系图',\n          type: 'graph',\n          layout: 'force',\n          legendHoverLink: true,\n          //是否启用图例 hover(悬停) 时的联动高亮。\n          hoverAnimation: true,\n          //是否开启鼠标悬停节点的显示动画\n          edgeLabel: {\n            position: 'middle',\n            //边上的文字样式\n            normal: {\n              formatter: \"{c}\",\n              show: true\n            }\n          },\n          edgeSymbol: ['arrow', ''],\n          force: {\n            edgeLength: 180,\n            repulsion: 500\n          },\n          roam: true,\n          draggable: true,\n          //每个节点的拖拉\n          itemStyle: {\n            normal: {\n              cursor: 'pointer',\n              //color:Math.floor(Math.random()*16777215).toString(16),\n              // color: ['#fc853e','#28cad8','#9564bf','#bd407e','#28cad8','#fc853e','#e5a214'],\n              label: {\n                //formatter: \"{c}\",为什么这个写上就不打开了？\n                show: true,\n                textStyle: {\n                  //标签的字体样式\n                  color: '#fff',\n                  //字体颜色\n                  fontStyle: 'normal',\n                  //文字字体的风格 'normal'标准 'italic'斜体 'oblique' 倾斜\n                  fontWeight: 'bolder',\n                  //'normal'标准'bold'粗的'bolder'更粗的'lighter'更细的或100 | 200 | 300 | 400...\n                  fontFamily: 'sans-serif',\n                  //文字的字体系列\n                  fontSize: 12 //字体大小\n\n                }\n              },\n              nodeStyle: {\n                brushType: \"both\",\n                borderColor: \"rgba(255,215,0,0.4)\",\n                borderWidth: 1\n              }\n            },\n            //鼠标放上去有阴影效果\n            emphasis: {\n              shadowColor: '#00FAE1',\n              shadowOffsetX: 0,\n              shadowOffsetY: 0,\n              shadowBlur: 40\n            }\n          },\n          lineStyle: {\n            width: 2\n          },\n          label: {\n            color: '#00FAE1',\n            fontSize: 18\n          },\n          symbolSize: 60,\n          //节点大小\n          links: dataList.edges,\n          data: dataList.nodes,\n          cursor: 'pointer'\n        }]\n      }; // 使用刚指定的配置项和数据显示图表。\n\n      this.myChart.setOption(option);\n    }\n    /**\n     * 格式化数据到表格需要的数据\n     */\n    // formatData(){\n    //     let nodes = []\n    //     const data = []\n    //     const links = []\n    //     let target = ''\n    //         this.nodes = []\n    //         this.links = []\n    //         nodes = [].concat(dataList)\n    //     nodes.forEach((items,indexs)=>{\n    //         items.nodes.forEach((item,index) => {\n    //             // 注意 id必须是string  否则连线连不上\n    //             const id = item.id + ''\n    //             const dataInfo = {\n    //                 \"id\": id,\n    //                 parentId:target,\n    //                 category:item.categary,\n    //                 \"name\": item.label,\n    //                 isClicked:false,\n    //                  \"itemStyle\": item.itemStyle,\n    //             }\n    //             data.push(dataInfo)\n    //         })\n    //         items.edges.forEach((i,d)=>{\n    //                 links.push({\n    //                     value:i.label,\n    //                     target:i.from,\n    //                     source:i.to,\n    //                 })\n    //         })\n    //     })\n    //     this.nodes.push(...data)\n    //     this.links.push(...links)\n    //     this.initCharts()\n    // },\n\n  },\n  created: function created() {},\n  mounted: function mounted() {\n    this.initCharts();\n  },\n  beforeDestroy: function beforeDestroy() {}\n};",{"version":3,"sources":["Charts.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n<div class=\"container\">\n        <div class=\"center\">\n            <div class=\"canvas\">\n                <div id=\"chart\" class=\"chart\"></div>\n            </div>\n        </div>\n\t</div>\n    \n</template>\n<script>\n    import{dataList} from './mock'\n    // 引入 ECharts 主模块\n    var echarts = require('echarts/lib/echarts');\n    // 引入柱状图\n    require('echarts/lib/chart/graph');\n    // 引入提示框和标题组件\n    require('echarts/lib/component/tooltip');\n    require('echarts/lib/component/title');\n    export default {\n        name:'Charts',\n        data(){\n            return {\n                myChart:'',\n                nodes:[],\n                links:[],\n            };\n        },\n        computed:{\n            \n        },\n        methods:{\n            /**\n             * 设置echarts配置项,重绘画布\n             */\n            initCharts(){\n                if(!this.myChart){\n                    this.myChart = echarts.init(document.getElementById('chart'));\n                }\n                // 指定图表的配置项和数据\n                let option = {\n                    // 动画更新变化时间\n                    animationDurationUpdate: 1500,                       \n                    animationEasingUpdate: 'quinticInOut',  \n                    tooltip:{\n                        show:false\n                    },\n                    series: [\n                        {\n                            name: '关系图',\n                            type:'graph',\n                            layout:'force',\n                            legendHoverLink: true, //是否启用图例 hover(悬停) 时的联动高亮。\n                            hoverAnimation: true, //是否开启鼠标悬停节点的显示动画\n                            edgeLabel: {   \n                                position:'middle',       //边上的文字样式\n                                normal: {\n                                    formatter:\"{c}\",\n                                    show:true,\n                                    \n                                }\n                            },\n                            edgeSymbol: ['arrow', ''],\n                            force:{\n                                edgeLength: 180,\n                                repulsion:500\n                            },\n                            roam:true,\n                            draggable : true,//每个节点的拖拉\n                            itemStyle:{\n                                normal: {\n                                    cursor:'pointer',\n                                    //color:Math.floor(Math.random()*16777215).toString(16),\n                                    // color: ['#fc853e','#28cad8','#9564bf','#bd407e','#28cad8','#fc853e','#e5a214'],\n                                    label: { \n                                            //formatter: \"{c}\",为什么这个写上就不打开了？\n                                            show: true ,\n                                            textStyle : { //标签的字体样式\n                                                color : '#fff', //字体颜色\n                                                fontStyle : 'normal',//文字字体的风格 'normal'标准 'italic'斜体 'oblique' 倾斜\n                                                fontWeight : 'bolder',//'normal'标准'bold'粗的'bolder'更粗的'lighter'更细的或100 | 200 | 300 | 400...\n                                                fontFamily : 'sans-serif', //文字的字体系列\n                                                fontSize : 12, //字体大小\n                                            }\n                                    },\n                                    nodeStyle: {\n                                        brushType: \"both\",\n                                        borderColor: \"rgba(255,215,0,0.4)\",\n                                        borderWidth: 1,\n                                    },\n                                },\n                                //鼠标放上去有阴影效果\n                                emphasis: {\n                                    shadowColor: '#00FAE1',\n                                    shadowOffsetX: 0,\n                                    shadowOffsetY: 0,\n                                    shadowBlur: 40,\n                                },\n                            },\n                            lineStyle:{\n                                width:2,\n                            },\n                            label:{\n                                color:'#00FAE1',\n                                fontSize:18,\n                            },\n                            symbolSize:60,//节点大小\n                            links: dataList.edges,\n                            data: dataList.nodes,\n                            cursor: 'pointer',\n                        }\n                    ]\n                };\n                // 使用刚指定的配置项和数据显示图表。\n                this.myChart.setOption(option);\n            },\n            /**\n             * 格式化数据到表格需要的数据\n             */\n            // formatData(){\n                \n            //     let nodes = []\n            //     const data = []\n            //     const links = []\n            //     let target = ''\n            //         this.nodes = []\n            //         this.links = []\n            //         nodes = [].concat(dataList)\n            //     nodes.forEach((items,indexs)=>{\n            //         items.nodes.forEach((item,index) => {\n            //             // 注意 id必须是string  否则连线连不上\n            //             const id = item.id + ''\n            //             const dataInfo = {\n            //                 \"id\": id,\n            //                 parentId:target,\n            //                 category:item.categary,\n            //                 \"name\": item.label,\n            //                 isClicked:false,\n            //                  \"itemStyle\": item.itemStyle,\n            //             }\n            //             data.push(dataInfo)\n                        \n            //         })\n            //         items.edges.forEach((i,d)=>{\n            //                 links.push({\n            //                     value:i.label,\n            //                     target:i.from,\n            //                     source:i.to,\n            //                 })\n            //         })\n                    \n                    \n            //     })\n            //     this.nodes.push(...data)\n            //     this.links.push(...links)\n            //     this.initCharts()\n            // },\n        },\n        created(){\n            \n        },\n        mounted(){\n            this.initCharts()\n        },\n        beforeDestroy(){\n            \n        }\n    }\n</script>\n<style scoped>\n.chart{\n    height:100%;\n}\n.container {\n    overflow: hidden;\n    position: relative;\n    min-height: 100vh;\n}\n.canvas {\n    margin-top: 10px;\n\theight: calc(100vh - 110px);\n}\n.center {\n\tposition: relative;\n\tmin-width: 1200px;\n\tmargin: 0 auto;\n    width: 85%;\n}\n.header {\n\tpadding-top: 30px;\n}\n.ipt {\n\tborder: 1px solid #9093c7;\n\tborder-radius: 20px;\n\twidth: 374px;\n\theight: 44px;\n\tline-height: 44px;\n\tbox-sizing: border-box;\n    color: #555;\n    background-color: #fff;\n    background-image: none;\n    border: 1px solid #ccc;\n}\n\n.tips {\n\tfont-size: 14px;\n\tcolor: #ccc;\n\tline-height: 17px;\n\tmargin-top: 5px;\n}\n</style>"],"sourceRoot":"src/components"}]}