{"remainingRequest":"E:\\wz\\knowledgeGraph-master\\node_modules\\babel-loader\\lib\\index.js!E:\\wz\\knowledgeGraph-master\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\wz\\knowledgeGraph-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\wz\\knowledgeGraph-master\\src\\components\\Keywords.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\wz\\knowledgeGraph-master\\src\\components\\Keywords.vue","mtime":1631165996131},{"path":"E:\\wz\\knowledgeGraph-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1631155481252},{"path":"E:\\wz\\knowledgeGraph-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1629941514589},{"path":"E:\\wz\\knowledgeGraph-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1631155481252},{"path":"E:\\wz\\knowledgeGraph-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1629941555268}],"contextDependencies":[],"result":["import \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.array.from\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport _toConsumableArray from \"E:/wz/knowledgeGraph-master/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"E:/wz/knowledgeGraph-master/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { categarys } from \"./mock\";\nexport default {\n  name: 'Keywords',\n  components: {},\n  mixins: [],\n  props: {},\n  data: function data() {\n    return {\n      tags: [],\n      RADIUS: 200,\n      ZRADIUS: 200,\n      CX: 600,\n      CY: 300,\n      speedX: Math.PI / 360,\n      speedY: Math.PI / 360\n    };\n  },\n  computed: {},\n  methods: {\n    /**\n     * 标签点击\n     */\n    nodeClick: function () {\n      var _nodeClick = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(tag) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.$emit('searchData', tag.text);\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function nodeClick(_x) {\n        return _nodeClick.apply(this, arguments);\n      }\n\n      return nodeClick;\n    }(),\n\n    /**\n     * 初始化标签数据\n     */\n    initTags: function initTags() {\n      var tagNames = _toConsumableArray(categarys); //初始化标签位置\n\n\n      var tags = [];\n      var length = tagNames.length;\n\n      for (var i = 0; i < length; i++) {\n        var tag = {};\n        var k = -1 + (2 * (i + 1) - 1) / length;\n        var a = Math.acos(k);\n        var b = a * Math.sqrt(length * Math.PI);\n        tag.text = tagNames[i];\n        tag.x = this.CX + this.RADIUS * Math.sin(a) * Math.cos(b);\n        tag.y = this.CY + this.RADIUS * Math.sin(a) * Math.sin(b);\n        tag.z = this.ZRADIUS * Math.cos(a);\n        tag.color = \"rgb(\" + parseInt(Math.random() * 255) + \",\" + parseInt(Math.random() * 255) + \",\" + parseInt(Math.random() * 255) + \")\";\n        tags.push(tag);\n      }\n\n      this.tags = [].concat(tags);\n    },\n\n    /**\n     * 自动滚动效果,计算滚动位置\n     */\n    rotateX: function rotateX(speedX) {\n      var cos = Math.cos(speedX);\n      var sin = Math.sin(speedX);\n\n      var _iterator = _createForOfIteratorHelper(this.tags),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var tag = _step.value;\n          var y1 = (tag.y - this.CY) * cos - tag.z * sin + this.CY;\n          var z1 = tag.z * cos + (tag.y - this.CY) * sin;\n          tag.y = y1;\n          tag.z = z1;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    },\n\n    /**\n     * 自动滚动效果,计算滚动位置\n     */\n    rotateY: function rotateY(speedY) {\n      var cos = Math.cos(speedY);\n      var sin = Math.sin(speedY);\n\n      var _iterator2 = _createForOfIteratorHelper(this.tags),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var tag = _step2.value;\n          var x1 = (tag.x - this.CX) * cos - tag.z * sin + this.CX;\n          var z1 = tag.z * cos + (tag.x - this.CX) * sin;\n          tag.x = x1;\n          tag.z = z1;\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    },\n\n    /**\n     * 响应鼠标移动\n     */\n    listener: function listener(event) {\n      //\n      var x = event.clientX - this.CX;\n      var y = event.clientY - this.CY;\n      this.speedX = x * 0.0001 > 0 ? Math.min(this.RADIUS * 0.00002, x * 0.0001) : Math.max(-this.RADIUS * 0.00002, x * 0.0001);\n      this.speedY = y * 0.0001 > 0 ? Math.min(this.RADIUS * 0.00002, y * 0.0001) : Math.max(-this.RADIUS * 0.00002, y * 0.0001);\n    },\n\n    /**\n     * 监听窗体大小变化\n     */\n    resizeWindow: function resizeWindow() {\n      var height = document.body.clientHeight;\n      var width = document.body.clientWidth;\n      width = width * 0.85;\n\n      if (width > 1200) {\n        this.CX = width / 2;\n      }\n\n      height = height - 150;\n      this.CY = height / 2;\n      var radius = Math.min(this.CY, this.CX) / 2;\n\n      if (radius > 200) {\n        this.RADIUS = radius;\n      }\n\n      this.initTags();\n      this.$emit('windowResize');\n    }\n  },\n  created: function created() {},\n  mounted: function mounted() {\n    var _this = this;\n\n    this.resizeWindow();\n    window.addEventListener('resize', this.resizeWindow);\n    this.initTags(); //使球开始旋转\n\n    var interval = setInterval(function () {\n      _this.rotateX(_this.speedX);\n\n      _this.rotateY(_this.speedY);\n    }, 17);\n    this.$once('hook:beforedestroy', function () {\n      interval && clearInterval(interval);\n      window.removeEventListener('resize', _this.resizeWindow);\n    });\n  },\n  beforeDestroy: function beforeDestroy() {}\n};",{"version":3,"sources":["Keywords.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div class=\"container\">\n        <svg class=\"keywords\" @mousemove=\"listener($event)\">\n            <a href=\"javascript:void(0)\" v-for=\"(tag,index) in tags\" :key=\"index\" @click=\"nodeClick(tag)\">\n                <text\n                    class=\"text\"\n                    :x=\"tag.x\"\n                    :y=\"tag.y\"\n                    :font-size=\"20 * (600/(600-tag.z))\"\n                    :fill-opacity=\"((400+tag.z)/600)\"\n                    :fill=\"tag.color\"\n                    >{{tag.text}}\n                </text>\n            </a>\n        </svg>\n    </div>\n</template>\n<script>\n    import {\n        categarys\n    } from './mock'\n    export default {\n        name:'Keywords',\n        components:{\n            \n        },\n        mixins:[\n            \n        ],\n        props:{\n            \n        },\n        data(){\n            return {\n                tags:[],\n                RADIUS:200,\n                ZRADIUS:200,\n                CX:600,\n                CY:300,\n                speedX: Math.PI / 360,\n                speedY: Math.PI / 360,\n            };\n        },\n        computed:{\n\n        },\n        methods:{\n            /**\n             * 标签点击\n             */\n            async nodeClick(tag){\n                this.$emit('searchData',tag.text)\n            },\n            /**\n             * 初始化标签数据\n             */\n            initTags(){\n                const tagNames = [...categarys]\n                //初始化标签位置\n                let tags = [];\n                const length = tagNames.length\n                for (let i = 0; i < length; i++) {\n                    let tag = {};\n                    let k = -1 + (2 * (i + 1) - 1) / length;\n                    let a = Math.acos(k);\n                    let b = a * Math.sqrt(length * Math.PI);\n                    tag.text = tagNames[i];\n                    tag.x = this.CX + this.RADIUS * Math.sin(a) * Math.cos(b);\n                    tag.y = this.CY + this.RADIUS * Math.sin(a) * Math.sin(b);\n                    tag.z = this.ZRADIUS * Math.cos(a);\n                    tag.color =\n                        \"rgb(\" +\n                        parseInt(Math.random() * 255) +\n                        \",\" +\n                        parseInt(Math.random() * 255) +\n                        \",\" +\n                        parseInt(Math.random() * 255) +\n                        \")\";\n                    tags.push(tag);\n                }\n                this.tags = [].concat(tags);\n            },\n            /**\n             * 自动滚动效果,计算滚动位置\n             */\n            rotateX(speedX) {\n                var cos = Math.cos(speedX);\n                var sin = Math.sin(speedX);\n                for (let tag of this.tags) {\n                    var y1 = (tag.y - this.CY) * cos - tag.z * sin + this.CY;\n                    var z1 = tag.z * cos + (tag.y - this.CY) * sin;\n                    tag.y = y1;\n                    tag.z = z1;\n                }\n            },\n            /**\n             * 自动滚动效果,计算滚动位置\n             */\n            rotateY(speedY) {\n                var cos = Math.cos(speedY);\n                var sin = Math.sin(speedY);\n                for (let tag of this.tags) {\n                    var x1 = (tag.x - this.CX) * cos - tag.z * sin + this.CX;\n                    var z1 = tag.z * cos + (tag.x - this.CX) * sin;\n                    tag.x = x1;\n                    tag.z = z1;\n                }\n            },\n            /**\n             * 响应鼠标移动\n             */\n            listener(event) {\n                //\n                var x = event.clientX - this.CX;\n                var y = event.clientY - this.CY;\n                this.speedX =\n                    x * 0.0001 > 0\n                    ? Math.min(this.RADIUS * 0.00002, x * 0.0001)\n                    : Math.max(-this.RADIUS * 0.00002, x * 0.0001);\n                this.speedY =\n                    y * 0.0001 > 0\n                    ? Math.min(this.RADIUS * 0.00002, y * 0.0001)\n                    : Math.max(-this.RADIUS * 0.00002, y * 0.0001);\n            },\n            /**\n             * 监听窗体大小变化\n             */\n            resizeWindow(){\n                let height = document.body.clientHeight\n                let width = document.body.clientWidth\n                width = width*0.85;\n                if(width>1200){\n                    this.CX = width/2\n                }\n                height = height - 150\n                this.CY = height / 2;\n                let radius = Math.min(this.CY,this.CX)/2\n                if(radius>200){\n                     this.RADIUS = radius\n                }\n               this.initTags()\n                this.$emit('windowResize')\n            }\n        },\n        created(){\n            \n        },\n        mounted(){\n            this.resizeWindow()\n            window.addEventListener('resize',this.resizeWindow)\n            this.initTags()\n            //使球开始旋转\n            const interval = setInterval(() => {\n                this.rotateX(this.speedX);\n                this.rotateY(this.speedY);\n            }, 17);\n            this.$once('hook:beforedestroy',()=>{\n                interval&&clearInterval(interval)\n                window.removeEventListener('resize',this.resizeWindow)\n            })\n        },\n        beforeDestroy(){\n            \n        }\n    }\n</script>\n<style scoped>\n    .container,.keywords{\n        width: 100%;\n        height:100%;\n    }\n    .keywords .text:hover{\n        font-size: 200%;\n    }\n</style>"],"sourceRoot":"src/components"}]}